<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qv2raynode.github.io/news/article-28623.htm" />
    <!--====== Required meta tags ======-->
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Linux  C++  实现一个简易版的ping （也就是ICMP协议）</title>
        <meta name="description" content="想实现一个在没外网的时候就自动重启路由器的功能。 又不想用ping命令，因为在代码里调用system("ping"); 可能会比较耗时，得单开线程。于是找了个实现ICMP协议的代码。 参考：https" />
        <link rel="icon" href="/assets/website/img/qv2raynode/favicon.ico" type="image/x-icon"/>
    <!--====== Bootstrap css ======-->
    <link rel="stylesheet" href="/assets/website/css/qv2raynode/bootstrap.min.css">
    <!--====== Fontawesome css ======-->
    <link rel="stylesheet" href="/assets/website/fonts/qv2raynode/fontawesome/css/all.css">
    <!--====== Fontawesome css ======-->
    <link rel="stylesheet" href="/assets/website/fonts/qv2raynode/flaticon/flaticon.css">
    <!--====== Magnific Popup css ======-->
    <link rel="stylesheet" href="/assets/website/css/qv2raynode/magnific-popup.css">
    <!--====== Slick css ======-->
    <link rel="stylesheet" href="/assets/website/css/qv2raynode/slick.css">
    <!--====== Nice select css ======-->
    <link rel="stylesheet" href="/assets/website/css/qv2raynode/nice-select.css">
    <!--====== Default css ======-->
    <link rel="stylesheet" href="/assets/website/css/qv2raynode/default.css">
    <!--====== Style css ======-->
    <link rel="stylesheet" href="/assets/website/css/qv2raynode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-J9XWNVB56T"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-J9XWNVB56T');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--====== Start Preloader ======-->
    <div class="preloader">
        <div class="lds-ellipsis">
            <span></span>
            <span></span>
            <span></span>
        </div>
    </div>
    <!--====== End Preloader ======-->
    <!--====== Start Header ======-->
    <header class="header-area header-area-v1">
        <div class="header-navigation">
            <div class="container-fluid">
                <div class="row align-items-center">
                    <div class="col-lg-2 col-md-6 col-6">
                        <div class="site-branding">
                            <div class="brand-logo">
                                <a href="/">
                                                                        <span>QV2ray Node</span>
                                                                    </a>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-7 col-md-4 col-4">
                        <div class="nav-menu">
                            <!-- Mobile Menu Logo -->
                            <div class="site-branding text-center ml-2 mr-2 mb-4 d-none">
                                <div class="brand-logo">
                                    <a href="/">
                                        QV2ray Node
                                    </a>
                                </div>
                            </div>
                            <!-- navbar-close -->
                            <div class="navbar-close">
                                <div class="cross-wrap"><span class="top"></span><span class="bottom"></span></div>
                            </div>
                            <!-- main menu -->
                            <nav class="main-menu">
                                <ul>
                                                                        <li class="menu-item"><a href="/">首页</a></li>
                                                                        <li class="menu-item"><a href="/free-nodes/">免费节点</a></li>
                                                                        <li class="menu-item"><a href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li class="menu-item"><a href="/news/">新闻资讯</a></li>
                                                                        <li class="menu-item"><a href="#">关于</a></li>
                                    <li class="menu-item"><a href="#">联系</a></li>
                                </ul>
                            </nav>
                        </div>
                        <!-- navbar toggler -->
                        <div class="navbar-toggler float-right">
                            <span></span><span></span><span></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    <!--====== End Header ======-->
    <!--====== Start breadcrumbs-section section ======-->
    <section class="breadcrumbs-section bg_cover" style="background-image: url(/assets/website/img/qv2raynode/bg/breadcrumbs-bg.jpg);">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="breadcrumbs-content text-center">
                        <h1>Linux  C++  实现一个简易版的ping （也就是ICMP协议）</h1>
                        <ul class="link">
                            <li><a href="/">首页</a></li>
                            <li><a href="/news/">新闻资讯</a></li>
                            <li class="active">正文</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!--====== End breadcrumbs-section section ======-->
    <!--====== Start About Section ======-->
    <section class="about-area-v1 pb-60 pt-60">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="V2ray X节点订阅官网" data-url="https://v2rayx.github.io">
                  				  				  				</h1> <p>想实现一个在没外网的时候就自动重启路由器的功能。</p> <p>又不想用ping命令，因为在代码里调用system("ping"); 可能会比较耗时，得单开线程。于是找了个实现ICMP协议的代码。</p> <p>参考：https://blog.csdn.net/qivan/article/details/7237051</p> </h1> <div class="cnblogs_code"> <pre>#include &lt;stdio.h&gt;<span style="color: rgba(0, 0, 0, 1)"> #include</span>&lt;sys/socket.h&gt;<span style="color: rgba(0, 0, 0, 1)"> #include</span>&lt;netinet/<span style="color: rgba(0, 0, 255, 1)">in</span>.h&gt;<span style="color: rgba(0, 0, 0, 1)"> #include</span>&lt;netinet/ip.h&gt;<span style="color: rgba(0, 0, 0, 1)"> #include</span>&lt;netinet/ip_icmp.h&gt;<span style="color: rgba(0, 0, 0, 1)"> #include</span>&lt;arpa/inet.h&gt;<span style="color: rgba(0, 0, 0, 1)"> #include</span>&lt;sys/types.h&gt;<span style="color: rgba(0, 0, 0, 1)"> #include</span>&lt;sys/time.h&gt;<span style="color: rgba(0, 0, 0, 1)"> #include</span>&lt;unistd.h&gt;<span style="color: rgba(0, 0, 0, 1)"> #include</span>&lt;netdb.h&gt;<span style="color: rgba(0, 0, 0, 1)"> #include</span>&lt;<span style="color: rgba(0, 0, 255, 1)">string</span>.h&gt;<span style="color: rgba(0, 0, 255, 1)">#define</span> PACKET_SIZE     4096<span style="color: rgba(0, 0, 255, 1)">#define</span> ERROR           0<span style="color: rgba(0, 0, 255, 1)">#define</span> SUCCESS         1<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">效验算法（百度下有注释，但是还是看不太明白）</span> unsigned<span style="color: rgba(0, 0, 255, 1)">short</span> cal_chksum(unsigned<span style="color: rgba(0, 0, 255, 1)">short</span> *addr,<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> len) {</span><span style="color: rgba(0, 0, 255, 1)">int</span> nleft=<span style="color: rgba(0, 0, 0, 1)">len;</span><span style="color: rgba(0, 0, 255, 1)">int</span> sum=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;     unsigned</span><span style="color: rgba(0, 0, 255, 1)">short</span> *w=<span style="color: rgba(0, 0, 0, 1)">addr;     unsigned</span><span style="color: rgba(0, 0, 255, 1)">short</span> answer=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">while</span>(nleft &gt;<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)     {         sum</span>+= *w++<span style="color: rgba(0, 0, 0, 1)">;         nleft</span>-=<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">;     }</span><span style="color: rgba(0, 0, 255, 1)">if</span>( nleft ==<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)     {</span>*(unsigned<span style="color: rgba(0, 0, 255, 1)">char</span> *)(&amp;answer) = *(unsigned<span style="color: rgba(0, 0, 255, 1)">char</span> *<span style="color: rgba(0, 0, 0, 1)">)w;         sum</span>+=<span style="color: rgba(0, 0, 0, 1)"> answer;     }          sum</span>= (sum &gt;&gt;<span style="color: rgba(128, 0, 128, 1)">16</span>) + (sum &amp;<span style="color: rgba(128, 0, 128, 1)">0xffff</span><span style="color: rgba(0, 0, 0, 1)">);     sum</span>+= (sum &gt;&gt;<span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">);     answer</span>= ~<span style="color: rgba(0, 0, 0, 1)">sum;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> answer; }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Ping函数</span><span style="color: rgba(0, 0, 255, 1)">int</span> ping(<span style="color: rgba(0, 0, 255, 1)">char</span> *ips,<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> timeout)   {</span><span style="color: rgba(0, 0, 255, 1)">struct</span> timeval *<span style="color: rgba(0, 0, 0, 1)">tval;</span><span style="color: rgba(0, 0, 255, 1)">int</span> maxfds =<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;       fd_set readfds;</span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> sockaddr_in addr;</span><span style="color: rgba(0, 0, 255, 1)">struct</span> sockaddr_in<span style="color: rgba(0, 0, 255, 1)">from</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设定Ip信息</span>     bzero(&amp;addr,<span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(addr));       addr.sin_family</span>=<span style="color: rgba(0, 0, 0, 1)"> AF_INET;        addr.sin_addr.s_addr</span>=<span style="color: rgba(0, 0, 0, 1)"> inet_addr(ips);</span><span style="color: rgba(0, 0, 255, 1)">#if</span> 1<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> sockfd;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 取得socket  。  如果没加sudo 这里会报错</span>     sockfd =<span style="color: rgba(0, 0, 0, 1)"> socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);</span><span style="color: rgba(0, 0, 255, 1)">if</span> (sockfd &lt;<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)       {           printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ip:%s,socket error\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,ips);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ERROR;       }</span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> timeval timeo;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设定TimeOut时间</span>     timeo.tv_sec = timeout /<span style="color: rgba(128, 0, 128, 1)">1000</span><span style="color: rgba(0, 0, 0, 1)">;       timeo.tv_usec</span>= timeout %<span style="color: rgba(128, 0, 128, 1)">1000</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">if</span> (setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &amp;timeo,<span style="color: rgba(0, 0, 255, 1)">sizeof</span>(timeo)) == -<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)       {           printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ip:%s,setsockopt error\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,ips);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ERROR;       }</span><span style="color: rgba(0, 0, 255, 1)">char</span><span style="color: rgba(0, 0, 0, 1)"> sendpacket[PACKET_SIZE];</span><span style="color: rgba(0, 0, 255, 1)">char</span><span style="color: rgba(0, 0, 0, 1)"> recvpacket[PACKET_SIZE];</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设定Ping包</span>     memset(sendpacket,<span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(sendpacket));            pid_t pid;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 取得PID，作为Ping的Sequence ID</span>     pid=<span style="color: rgba(0, 0, 0, 1)">getpid();</span><span style="color: rgba(0, 0, 255, 1)">struct</span> ip *<span style="color: rgba(0, 0, 0, 1)">iph;</span><span style="color: rgba(0, 0, 255, 1)">struct</span> icmp *<span style="color: rgba(0, 0, 0, 1)">icmp;               icmp</span>=(<span style="color: rgba(0, 0, 255, 1)">struct</span> icmp*<span style="color: rgba(0, 0, 0, 1)">)sendpacket;       icmp</span>-&gt;icmp_type=ICMP_ECHO;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">回显请求</span>     icmp-&gt;icmp_code=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;       icmp</span>-&gt;icmp_cksum=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;       icmp</span>-&gt;icmp_seq=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;       icmp</span>-&gt;icmp_id=<span style="color: rgba(0, 0, 0, 1)">pid;      tval</span>= (<span style="color: rgba(0, 0, 255, 1)">struct</span> timeval *)icmp-&gt;<span style="color: rgba(0, 0, 0, 1)">icmp_data;       gettimeofday(tval,NULL);       icmp</span>-&gt;icmp_cksum=cal_chksum((unsigned<span style="color: rgba(0, 0, 255, 1)">short</span> *)icmp,<span style="color: rgba(0, 0, 255, 1)">sizeof</span>(<span style="color: rgba(0, 0, 255, 1)">struct</span> icmp));<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">校验</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> n;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 发包 。可以把这个发包挪到循环里面去。</span>     n = sendto(sockfd, (<span style="color: rgba(0, 0, 255, 1)">char</span> *)&amp;sendpacket,<span style="color: rgba(0, 0, 255, 1)">sizeof</span>(<span style="color: rgba(0, 0, 255, 1)">struct</span> icmp),<span style="color: rgba(128, 0, 128, 1)">0</span>, (<span style="color: rgba(0, 0, 255, 1)">struct</span> sockaddr *)&amp;addr,<span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(addr));</span><span style="color: rgba(0, 0, 255, 1)">if</span> (n &lt;<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)       {           printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ip:%s,sendto error\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,ips);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ERROR;       }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 接受</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 由于可能接受到其他Ping的应答消息，所以这里要用循环</span><span style="color: rgba(0, 0, 255, 1)">while</span>(<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)       {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 设定TimeOut时间，这次才是真正起作用的</span>         FD_ZERO(&amp;<span style="color: rgba(0, 0, 0, 1)">readfds);           FD_SET(sockfd,</span>&amp;<span style="color: rgba(0, 0, 0, 1)">readfds);           maxfds</span>= sockfd +<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;           n</span>=<span style="color: rgba(0, 0, 255, 1)">select</span>(maxfds, &amp;readfds, NULL, NULL, &amp;<span style="color: rgba(0, 0, 0, 1)">timeo);</span><span style="color: rgba(0, 0, 255, 1)">if</span> (n &lt;=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)           {                       printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ip:%s,Time out error\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,ips);               close(sockfd);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ERROR;           }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 接受</span>         memset(recvpacket,<span style="color: rgba(128, 0, 128, 1)">0</span>,<span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(recvpacket));</span><span style="color: rgba(0, 0, 255, 1)">int</span> fromlen =<span style="color: rgba(0, 0, 255, 1)">sizeof</span>(<span style="color: rgba(0, 0, 255, 1)">from</span><span style="color: rgba(0, 0, 0, 1)">);           n</span>= recvfrom(sockfd, recvpacket,<span style="color: rgba(0, 0, 255, 1)">sizeof</span>(recvpacket),<span style="color: rgba(128, 0, 128, 1)">0</span>, (<span style="color: rgba(0, 0, 255, 1)">struct</span> sockaddr *)&amp;<span style="color: rgba(0, 0, 255, 1)">from</span>, (socklen_t *)&amp;<span style="color: rgba(0, 0, 0, 1)">fromlen);       printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">recvfrom Len:%d\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,n);</span><span style="color: rgba(0, 0, 255, 1)">if</span> (n &lt;<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">)      {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ERROR;           }</span><span style="color: rgba(0, 0, 255, 1)">char</span> *from_ip = (<span style="color: rgba(0, 0, 255, 1)">char</span> *)inet_ntoa(<span style="color: rgba(0, 0, 255, 1)">from</span><span style="color: rgba(0, 0, 0, 1)">.sin_addr);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断是否是自己Ping的回复</span><span style="color: rgba(0, 0, 255, 1)">if</span> (strcmp(from_ip,ips) !=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)           {               printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">NowPingip:%s Fromip:%s NowPingip is not same to Fromip,so ping wrong!\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,ips,from_ip);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ERROR;         }                    iph</span>= (<span style="color: rgba(0, 0, 255, 1)">struct</span> ip *<span style="color: rgba(0, 0, 0, 1)">)recvpacket;                    icmp</span>=(<span style="color: rgba(0, 0, 255, 1)">struct</span> icmp *)(recvpacket + (iph-&gt;ip_hl&lt;&lt;<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">));                    printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">ip:%s,icmp-&gt;icmp_type:%d,icmp-&gt;icmp_id:%d\n</span><span style="color: rgba(128, 0, 0, 1)">"</span>,ips,icmp-&gt;icmp_type,icmp-&gt;<span style="color: rgba(0, 0, 0, 1)">icmp_id);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 判断Ping回复包的状态</span><span style="color: rgba(0, 0, 255, 1)">if</span> (icmp-&gt;icmp_type == ICMP_ECHOREPLY &amp;&amp; icmp-&gt;icmp_id == pid)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">ICMP_ECHOREPLY回显应答</span><span style="color: rgba(0, 0, 0, 1)">        {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 正常就退出循环</span>         printf(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">icmp succecss .............  \n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;           }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">           {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 否则继续等</span><span style="color: rgba(0, 0, 255, 1)">continue</span><span style="color: rgba(0, 0, 0, 1)">;           }       }</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> SUCCESS; }</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> main() {</span><span style="color: rgba(0, 0, 255, 1)">#if</span> 1<span style="color: rgba(0, 0, 255, 1)">char</span> cPing[<span style="color: rgba(128, 0, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">];     printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Please input ping IP:</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);     scanf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">%s</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,cPing);</span><span style="color: rgba(0, 0, 255, 1)">#else</span><span style="color: rgba(0, 0, 255, 1)">char</span> *cPing =<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">192.168.1.200</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">#endif</span><span style="color: rgba(0, 0, 255, 1)">if</span>(ping(cPing,<span style="color: rgba(128, 0, 128, 1)">10000</span><span style="color: rgba(0, 0, 0, 1)">))     {         printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Ping succeed!\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);     }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)">     {         printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Ping wrong!\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);     }</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;     }</span></pre> </div> </h1> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5da809c6847ea3937caed0e459c6659b.jpg" alt="Linux  C++  实现一个简易版的ping （也就是ICMP协议）"></p> </h1> <p>0）直接用参考链接上的代码时编译不过，不知道是不是因为我用的是cpp，没太深究。</p> <p>1）实际使用的时候需要加上sudo，不然在创建套接字那个地方会报错。我还没想好怎么在代码里用sudo，（因为实际项目运行起来是不需要加sudo的）。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-28166.htm">动物疫苗的使用方法视频讲解教程图片（动物疫苗制作流程）</a></p>
                                        <p>下一个：<a href="/news/article-28624.htm">使用CreateThreadPool创建线程池</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-19-node-share.htm" title="11月19日→20.6M/S|2024年最新免费节点QV2ray Node订阅链接地址">11月19日→20.6M/S|2024年最新免费节点QV2ray Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-22-node-share-links.htm" title="12月22日→19.5M/S|2024年最新免费节点QV2ray Node订阅链接地址">12月22日→19.5M/S|2024年最新免费节点QV2ray Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-20310.htm" title="私人出售狗小狗怎么处理（私人卖狗怎么卖）">私人出售狗小狗怎么处理（私人卖狗怎么卖）</a></li>
                        <li class="py-2"><a href="/news/article-29563.htm" title="野生动物园兽医一个月工资大概多少（动物园的兽医招聘）">野生动物园兽医一个月工资大概多少（动物园的兽医招聘）</a></li>
                        <li class="py-2"><a href="/news/article-27689.htm" title="MySQL性能优化 &#8211; 别再只会说加索引了_在线工具">MySQL性能优化 &#8211; 别再只会说加索引了_在线工具</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-13-node-share-links.htm" title="11月13日→22.5M/S|2024年最新免费节点QV2ray Node订阅链接地址">11月13日→22.5M/S|2024年最新免费节点QV2ray Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-7-free-node-subscribe.htm" title="12月7日→22.6M/S|2024年最新免费节点QV2ray Node订阅链接地址">12月7日→22.6M/S|2024年最新免费节点QV2ray Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-23505.htm" title="深圳百姓网免费领养宠物（深圳市宠物免费领养）">深圳百姓网免费领养宠物（深圳市宠物免费领养）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-15-free-subscribe-node.htm" title="11月15日→18.4M/S|2024年最新免费节点QV2ray Node订阅链接地址">11月15日→18.4M/S|2024年最新免费节点QV2ray Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-6-node-share-links.htm" title="11月6日→18.5M/S|2024年最新免费节点QV2ray Node订阅链接地址">11月6日→18.5M/S|2024年最新免费节点QV2ray Node订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">66</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!--====== End About Section ======-->
        <!--====== Start Footer Area ======-->
    <footer class="bebsa-footer footer-v2 bg_cover" style="background-image: url(/assets/website/img/qv2raynode/footer/footer-bg-2.jpg);">
        <div class="copyright-area">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-lg-6 col-md-6 col-sm-12">
                        <div class="footer-social">
                            <ul class="social-link">
                                <li><a href="#"><i class="fab fa-facebook-f"></i></a></li>
                                <li><a href="#"><i class="fab fa-twitter"></i></a></li>
                                <li><a href="#"><i class="fab fa-linkedin-in"></i></a></li>
                                <li><a href="#"><i class="fab fa-behance"></i></a></li>
                                <li><a href="#"><i class="fab fa-youtube"></i></a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-12">
                        <div class="copyright-text">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                <a href="/">QV2ray Node免费机场订阅节点官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!--====== End Footer Area ======-->
    <!--====== back-to-top ======-->
    <a href="#" class="back-to-top"><i class="fas fa-angle-up"></i></a>
    <!--====== Jquery js ======-->
    <script src="/assets/website/js/frontend/qv2raynode/vendor/modernizr-3.6.0.min.js"></script>
    <script src="/assets/website/js/frontend/qv2raynode/vendor/jquery-1.12.4.min.js"></script>
    <!--====== Bootstrap js ======-->
    <script src="/assets/website/js/frontend/qv2raynode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/qv2raynode/popper.min.js"></script>
    <!--====== Slick js ======-->
    <script src="/assets/website/js/frontend/qv2raynode/slick.min.js"></script>
    <!--====== Magnific Popup js ======-->
    <script src="/assets/website/js/frontend/qv2raynode/jquery.magnific-popup.min.js"></script>
    <!--====== Isotope js ======-->
    <script src="/assets/website/js/frontend/qv2raynode/isotope.pkgd.min.js"></script>
    <!--====== Imagesloaded js ======-->
    <script src="/assets/website/js/frontend/qv2raynode/imagesloaded.pkgd.min.js"></script>
    <!--====== Easy Pie Chart ======-->
    <script src="/assets/website/js/frontend/qv2raynode/jquery.easypiechart.min.js"></script>
    <!--====== counterup js ======-->
    <script src="/assets/website/js/frontend/qv2raynode/jquery.counterup.min.js"></script>
    <!--====== waypoints js ======-->
    <script src="/assets/website/js/frontend/qv2raynode/waypoints.min.js"></script>
    <!--====== Nice select js ======-->
    <script src="/assets/website/js/frontend/qv2raynode/jquery.nice-select.min.js"></script>
    <!--====== Main js ======-->
    <script src="/assets/website/js/frontend/qv2raynode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>